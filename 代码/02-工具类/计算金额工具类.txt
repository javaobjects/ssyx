	//计算总金额
	private BigDecimal computeTotalAmount(List<CartInfo> cartInfoList) {
		BigDecimal total = new BigDecimal(0);
		for (CartInfo cartInfo : cartInfoList) {
			BigDecimal itemTotal = cartInfo.getCartPrice().multiply(new BigDecimal(cartInfo.getSkuNum()));
			total = total.add(itemTotal);
		}
		return total;
	}

	/**
	 * 计算购物项分摊的优惠减少金额
	 * 打折：按折扣分担
	 * 现金：按比例分摊
	 * @param cartInfoParamList
	 * @return
	 */
	private Map<String, BigDecimal> computeActivitySplitAmount(List<CartInfo> cartInfoParamList) {
		Map<String, BigDecimal> activitySplitAmountMap = new HashMap<>();

		//促销活动相关信息
		List<CartInfoVo> cartInfoVoList = activityFeignClient.findCartActivityList(cartInfoParamList);

		//活动总金额
		BigDecimal activityReduceAmount = new BigDecimal(0);
		if(!CollectionUtils.isEmpty(cartInfoVoList)) {
			for(CartInfoVo cartInfoVo : cartInfoVoList) {
				ActivityRule activityRule = cartInfoVo.getActivityRule();
				List<CartInfo> cartInfoList = cartInfoVo.getCartInfoList();
				if(null != activityRule) {
					//优惠金额， 按比例分摊
					BigDecimal reduceAmount = activityRule.getReduceAmount();
					activityReduceAmount = activityReduceAmount.add(reduceAmount);
					if(cartInfoList.size() == 1) {
						activitySplitAmountMap.put("activity:"+cartInfoList.get(0).getSkuId(), reduceAmount);
					} else {
						//总金额
						BigDecimal originalTotalAmount = new BigDecimal(0);
						for(CartInfo cartInfo : cartInfoList) {
							BigDecimal skuTotalAmount = cartInfo.getCartPrice().multiply(new BigDecimal(cartInfo.getSkuNum()));
							originalTotalAmount = originalTotalAmount.add(skuTotalAmount);
						}
						//记录除最后一项是所有分摊金额， 最后一项=总的 - skuPartReduceAmount
						BigDecimal skuPartReduceAmount = new BigDecimal(0);
						if (activityRule.getActivityType() == ActivityType.FULL_REDUCTION) {
							for(int i=0, len=cartInfoList.size(); i<len; i++) {
								CartInfo cartInfo = cartInfoList.get(i);
								if(i < len -1) {
									BigDecimal skuTotalAmount = cartInfo.getCartPrice().multiply(new BigDecimal(cartInfo.getSkuNum()));
									//sku分摊金额
									BigDecimal skuReduceAmount = skuTotalAmount.divide(originalTotalAmount, 2, RoundingMode.HALF_UP).multiply(reduceAmount);
									activitySplitAmountMap.put("activity:"+cartInfo.getSkuId(), skuReduceAmount);

									skuPartReduceAmount = skuPartReduceAmount.add(skuReduceAmount);
								} else {
									BigDecimal skuReduceAmount = reduceAmount.subtract(skuPartReduceAmount);
									activitySplitAmountMap.put("activity:"+cartInfo.getSkuId(), skuReduceAmount);
								}
							}
						} else {
							for(int i=0, len=cartInfoList.size(); i<len; i++) {
								CartInfo cartInfo = cartInfoList.get(i);
								if(i < len -1) {
									BigDecimal skuTotalAmount = cartInfo.getCartPrice().multiply(new BigDecimal(cartInfo.getSkuNum()));

									//sku分摊金额
									BigDecimal skuDiscountTotalAmount = skuTotalAmount.multiply(activityRule.getBenefitDiscount().divide(new BigDecimal("10")));
									BigDecimal skuReduceAmount = skuTotalAmount.subtract(skuDiscountTotalAmount);
									activitySplitAmountMap.put("activity:"+cartInfo.getSkuId(), skuReduceAmount);

									skuPartReduceAmount = skuPartReduceAmount.add(skuReduceAmount);
								} else {
									BigDecimal skuReduceAmount = reduceAmount.subtract(skuPartReduceAmount);
									activitySplitAmountMap.put("activity:"+cartInfo.getSkuId(), skuReduceAmount);
								}
							}
						}
					}
				}
			}
		}
		activitySplitAmountMap.put("activity:total", activityReduceAmount);
		return activitySplitAmountMap;
	}

	//优惠卷优惠金额
	private Map<String, BigDecimal> computeCouponInfoSplitAmount(List<CartInfo> cartInfoList, Long couponId) {
		Map<String, BigDecimal> couponInfoSplitAmountMap = new HashMap<>();

		if(null == couponId) return couponInfoSplitAmountMap;
		CouponInfo couponInfo = activityFeignClient.findRangeSkuIdList(cartInfoList, couponId);

		if(null != couponInfo) {
			//sku对应的订单明细
			Map<Long, CartInfo> skuIdToCartInfoMap = new HashMap<>();
			for (CartInfo cartInfo : cartInfoList) {
				skuIdToCartInfoMap.put(cartInfo.getSkuId(), cartInfo);
			}
			//优惠券对应的skuId列表
			List<Long> skuIdList = couponInfo.getSkuIdList();
			if(CollectionUtils.isEmpty(skuIdList)) {
				return couponInfoSplitAmountMap;
			}
			//优惠券优化总金额
			BigDecimal reduceAmount = couponInfo.getAmount();
			if(skuIdList.size() == 1) {
				//sku的优化金额
				couponInfoSplitAmountMap.put("coupon:"+skuIdToCartInfoMap.get(skuIdList.get(0)).getSkuId(), reduceAmount);
			} else {
				//总金额
				BigDecimal originalTotalAmount = new BigDecimal(0);
				for (Long skuId : skuIdList) {
					CartInfo cartInfo = skuIdToCartInfoMap.get(skuId);
					BigDecimal skuTotalAmount = cartInfo.getCartPrice().multiply(new BigDecimal(cartInfo.getSkuNum()));
					originalTotalAmount = originalTotalAmount.add(skuTotalAmount);
				}
				//记录除最后一项是所有分摊金额， 最后一项=总的 - skuPartReduceAmount
				BigDecimal skuPartReduceAmount = new BigDecimal(0);
				if (couponInfo.getCouponType() == CouponType.CASH || couponInfo.getCouponType() == CouponType.FULL_REDUCTION) {
					for(int i=0, len=skuIdList.size(); i<len; i++) {
						CartInfo cartInfo = skuIdToCartInfoMap.get(skuIdList.get(i));
						if(i < len -1) {
							BigDecimal skuTotalAmount = cartInfo.getCartPrice().multiply(new BigDecimal(cartInfo.getSkuNum()));
							//sku分摊金额
							BigDecimal skuReduceAmount = skuTotalAmount.divide(originalTotalAmount, 2, RoundingMode.HALF_UP).multiply(reduceAmount);
							couponInfoSplitAmountMap.put("coupon:"+cartInfo.getSkuId(), skuReduceAmount);

							skuPartReduceAmount = skuPartReduceAmount.add(skuReduceAmount);
						} else {
							BigDecimal skuReduceAmount = reduceAmount.subtract(skuPartReduceAmount);
							couponInfoSplitAmountMap.put("coupon:"+cartInfo.getSkuId(), skuReduceAmount);
						}
					}
				}
			}
			couponInfoSplitAmountMap.put("coupon:total", couponInfo.getAmount());
		}
		return couponInfoSplitAmountMap;
	}